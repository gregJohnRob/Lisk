Current Version: 0.2

Version 0.3:
SERVER:
* Modified base server code with a different template
* Condensed Encode and Coms source into Coms.c

 - Remove some of the legacy client connection code


Version 0.2 (B):
SERVER:
+ Added a populate function to fill map with players
+ Added some random number utilities, with ability to seed and a dice rollers


Version 0.2:
SERVER:
+ Added more backend Map functions


Version 0.1 (F):
SERVER:
+ Added Pathfinding for Nodes in Map (Doesn't take into consideration owner yet)
+ Added Linked List for the above ^
+ Added simple Map test on startup to check the connection code is working


Version 0.1: (E):
SERVER:
+ Added Flag MAP_DEBUG to printout the Map the Server has decided to pick when starting up
+ Added Map backend code for loading and freeing
+ Added Test_Map for debug operations
+ Added Utility function to print out any given Map pointer
TEST-CLIENT:


Version 0.1: (D)
SERVER:
+ Decode function to pass in message(s) from clients to decode into parts

** ADDED MAKEFILE **

TEST-CLIENT:


Version 0.1: (C)
SERVER:
* Fixed server only accepting half the number of accepted clients

+ Supports Protocol message encoding
+ When client connects they receive a welcome packet

- Modified some text output from server

TEST-CLIENT:
+ Checking for welcome packet then shutdown

Version 0.1: (B)
SERVER:
- When server accepts new client uses client_t struct to store info
- Added Protocol.h outlining message constants from client and to send
TEST-CLIENT:


Version 0.1:
SERVER:
- Server Runs
- Server Accepts upto MAX_CLIENTS
- Server closes after MAX_CLIENTS reached
- Send single message or broadcast to all clients

TEST-CLIENT:
- Connects to Client
- Reads in message of 4 bytes long
- If recieves "stop" closes after a delay
